Tekstsøk, Datakompresjon

Helge Hafting

Institutt for datateknologi og informatikk

Seksjon 1 Tekstsøk




  • Fritekstsøk i dokumenter, nettsider og lignende

  • Fritekstsøk i databaser

  • Søkemotorer

  • Søke etter repeterte strenger for datakompresjon

  • DNA-matching







  Tekst: rabarbra     (lengde n)

  Søkeord: bra     (lengde m)

  Skyv søkeordet langs teksten, se om det passer


    • tegn som passer, vises med fet skrift

    • første feil med kursiv

    • dobbeltløkke for n-m posisjoner, og m tegn i søkeordet.




  Hele greia, O\left(n\cdot m\right),\Omega\left(n\right)


  Forsøk  | r  | a  | b  | a  | r  | b  | r  | a
----------+----+----+----+----+----+----+----+----
    0     | b  | r  | a  |    |    |    |    |


  Forsøk  | r  | a  | b  | a  | r  | b  | r  | a
----------+----+----+----+----+----+----+----+----
    1     |    | b  | r  | a  |    |    |    |


  Forsøk  | r  | a  | b  | a  | r  | b  | r  | a
----------+----+----+----+----+----+----+----+----
    2     |    |    | b  | r  | a  |    |    |


  Forsøk  | r  | a  | b  | a  | r  | b  | r  | a
----------+----+----+----+----+----+----+----+----
    3     |    |    |    | b  | r  | a  |    |


  Forsøk  | r  | a  | b  | a  | r  | b  | r  | a
----------+----+----+----+----+----+----+----+----
    4     |    |    |    |    | b  | r  | a  |


  Forsøk  | r  | a  | b  | a  | r  | b  | r  | a
----------+----+----+----+----+----+----+----+----
    5     |    |    |    |    |    | b  | r  | a


  • Se på siste tegn i søketeksten først

  • Hvis det ikke passer, flytt søketeksten så langt vi kan



     | r  | a  | b  | a  | r  | b  | r  | a
    -----+----+----+----+----+----+----+----+----
      0  | b  | r  | a  |    |    |    |    |
      1  |    |    | b  | r  | a  |    |    |
      2  |    |    |    | b  | r  | a  |    |
      3  |    |    |    |    |    | b  | r  | a


  • Hvis det passer, se på nestsiste osv.







  • Hvis tegnet ikke fins i søketeksten, kan vi flytte m steg
    frem:


     | m  | e  | t  | e  | o  | r  | i  | t  | t  | s  | t  | e  | i  | n
  -----+----+----+----+----+----+----+----+----+----+----+----+----+----+----
    0  | s  | t  | e  | i  | n  |    |    |    |    |    |    |    |    |
    1  |    |    |    |    |    | s  | t  | e  | i  | n  |    |    |    |
    2  |    |    |    |    |    |    |    |    |    | s  | t  | e  | i  | n


  • Hvis tegnet fins til venstre i søkeordet, kan vi flytte ordet
    så det passer med teksten

  • Vi har vi en tabell for hvor mye vi kan flytte

  • I praksis en tabell for hele alfabetet, hvor de fleste tegn
    gir et flytt på m. (Regel om «upassende tegn»)

  • Tabellen lager vi ved å pre-prosessere søketeksten

  • Tegn som fins i søketeksten, gir kortere flytt


    – En «s» i siste posisjon gir flytt på m-1, fordi ordet
      starter på «s»

  • \Omega\left(n/m\right) for søket. Mye bedre!







  • Hvis tegnet ikke fins i søketeksten, kan vi flytte m steg
    frem,


    – hvis mismatch var på siste tegn i søketeksten

    – med mismatch på nestsiste tegn kan vi flytte m-1 steg

    – ved mismatch på nestnestsiste, flytter vi m-2 steg osv.


     | m  | e  | t  | e  | o  | r  | i  | t  | t  | s  | t  | e  | i  | n
  -----+----+----+----+----+----+----+----+----+----+----+----+----+----+----
    0  | m  | e  | n  | e  |    |    |    |    |    |    |    |    |    |
    1  |    |    |    | m  | e  | n  | e  |    |    |    |    |    |    |


  • Vi trenger altså en todimensjonal tabell:


    – En indeks er det upassende tegnet

    – Den andre indeksen er posisjonen i søketeksten

    – Verdien i cellen er hvor langt vi kan flytte fremover







  For hver posisjon p i søketeksten

     For hvert tegn x i alfabetet

        let mot start i søketeksten fra p

        hvis vi finner x etter i steg,

        sett Tab[p][x] = i

        hvis vi ikke finner x, Tab[p][x]=p+1


